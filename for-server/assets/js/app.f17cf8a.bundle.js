(()=>{var __webpack_modules__={934:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval("/* src/app.js */\n// Styles\n\n\n__webpack_require__(392);\n\n__webpack_require__(771);\n\n__webpack_require__(944);\n\n__webpack_require__(486);\n\n__webpack_require__(920);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAuanM/OWE3OCJdLCJuYW1lcyI6WyJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBO0FBQ0E7O0FBRUFBLG1CQUFPLENBQUMsSUFBUjs7QUFDQUEsbUJBQU8sQ0FBQyxJQUFSOztBQUVBQSxtQkFBTyxDQUFDLElBQVI7O0FBQ0FBLG1CQUFPLENBQUMsSUFBUjs7QUFDQUEsbUJBQU8sQ0FBQyxJQUFSIiwiZmlsZSI6IjkzNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHNyYy9hcHAuanMgKi9cblxuLy8gU3R5bGVzXG5pbXBvcnQgJ3N0eWxlcy9fYXBwLnNjc3MnXG5cbnJlcXVpcmUoJ3NjcmlwdHMvc2xpY2snKVxucmVxdWlyZSgnc2NyaXB0cy9qcXVlcnkubW9kYWwubWluJylcblxucmVxdWlyZSgnc2NyaXB0cy9tYWluJylcbnJlcXVpcmUoJ3NjcmlwdHMvaGVhZGVyJylcbnJlcXVpcmUoJ3NjcmlwdHMvbW9kYWwnKVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///934\n")},486:(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/* provided dependency */ var $ = __webpack_require__(638);\n\n\n$(document).ready(function () {\n  $('.js-menu-toogle').on('click', function () {\n    event.preventDefault();\n    $(this).toggleClass('active');\n    $('.header__row').toggleClass('active');\n    $('body').toggleClass('menu-opened');\n  });\n  $(\"a\").on('click', function (event) {\n    if (this.hash !== \"\") {\n      event.preventDefault();\n      var hash = this.hash;\n      $('html, body').animate({\n        scrollTop: $(hash).offset().top\n      }, 800, function () {\n        window.location.hash = hash;\n      });\n      $('.js-menu-toogle').removeClass('active');\n      $('.header__row').removeClass('active');\n      $('body').removeClass('menu-opened');\n    }\n  });\n  var lastScrollTop = 0;\n  var delta = 5;\n  var header = $('.header');\n  var navbarHeight = header.outerHeight();\n  $(window).on('resize', function () {\n    if (!header.hasClass('header--fixed')) {\n      navbarHeight = header.outerHeight();\n    }\n  });\n  $(window).scroll(function (event) {\n    var st = $(this).scrollTop();\n\n    if (st > navbarHeight) {\n      header.addClass('header--fixed');\n    } else {\n      if (!header.hasClass('header--show')) {\n        header.removeClass('header--fixed header--show header--animate');\n      } else {\n        if (st === 0) {\n          header.removeClass('header--fixed header--show header--animate');\n        }\n      }\n    }\n\n    if (st > lastScrollTop && st > navbarHeight) {\n      header.removeClass('header--show');\n    } else {\n      if (st > navbarHeight) {\n        if (st + $(window).height() < $(document).height()) {\n          header.addClass('header--animate header--show');\n        }\n      }\n    }\n\n    header.on('transitionend', function () {\n      if (!$(this).hasClass('header--show')) {\n        $(this).removeClass('header--animate');\n      }\n    });\n    lastScrollTop = st;\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9oZWFkZXIuanM/MGIyOCJdLCJuYW1lcyI6WyIkIiwiZG9jdW1lbnQiLCJyZWFkeSIsIm9uIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInRvZ2dsZUNsYXNzIiwiaGFzaCIsImFuaW1hdGUiLCJzY3JvbGxUb3AiLCJvZmZzZXQiLCJ0b3AiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlbW92ZUNsYXNzIiwibGFzdFNjcm9sbFRvcCIsImRlbHRhIiwiaGVhZGVyIiwibmF2YmFySGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJoYXNDbGFzcyIsInNjcm9sbCIsInN0IiwiYWRkQ2xhc3MiLCJoZWlnaHQiXSwibWFwcGluZ3MiOiI7QUFBYTs7QUFDYkEsQ0FBQyxDQUFDQyxRQUFELENBQUQsQ0FBWUMsS0FBWixDQUFrQixZQUFXO0FBQzVCRixHQUFDLENBQUMsaUJBQUQsQ0FBRCxDQUFxQkcsRUFBckIsQ0FBd0IsT0FBeEIsRUFBZ0MsWUFBVztBQUMxQ0MsU0FBSyxDQUFDQyxjQUFOO0FBQ0FMLEtBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUU0sV0FBUixDQUFvQixRQUFwQjtBQUNBTixLQUFDLENBQUMsY0FBRCxDQUFELENBQWtCTSxXQUFsQixDQUE4QixRQUE5QjtBQUNBTixLQUFDLENBQUMsTUFBRCxDQUFELENBQVVNLFdBQVYsQ0FBc0IsYUFBdEI7QUFDQSxHQUxEO0FBUUFOLEdBQUMsQ0FBQyxHQUFELENBQUQsQ0FBT0csRUFBUCxDQUFVLE9BQVYsRUFBbUIsVUFBU0MsS0FBVCxFQUFnQjtBQUNsQyxRQUFJLEtBQUtHLElBQUwsS0FBYyxFQUFsQixFQUFzQjtBQUNyQkgsV0FBSyxDQUFDQyxjQUFOO0FBQ0EsVUFBSUUsSUFBSSxHQUFHLEtBQUtBLElBQWhCO0FBQ0FQLE9BQUMsQ0FBQyxZQUFELENBQUQsQ0FBZ0JRLE9BQWhCLENBQXdCO0FBQ3ZCQyxpQkFBUyxFQUFFVCxDQUFDLENBQUNPLElBQUQsQ0FBRCxDQUFRRyxNQUFSLEdBQWlCQztBQURMLE9BQXhCLEVBRUcsR0FGSCxFQUVRLFlBQVU7QUFDakJDLGNBQU0sQ0FBQ0MsUUFBUCxDQUFnQk4sSUFBaEIsR0FBdUJBLElBQXZCO0FBQ0EsT0FKRDtBQU1BUCxPQUFDLENBQUMsaUJBQUQsQ0FBRCxDQUFxQmMsV0FBckIsQ0FBaUMsUUFBakM7QUFDQWQsT0FBQyxDQUFDLGNBQUQsQ0FBRCxDQUFrQmMsV0FBbEIsQ0FBOEIsUUFBOUI7QUFDQWQsT0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVYyxXQUFWLENBQXNCLGFBQXRCO0FBQ0E7QUFDRCxHQWREO0FBaUJBLE1BQUlDLGFBQWEsR0FBRyxDQUFwQjtBQUNBLE1BQUlDLEtBQUssR0FBRyxDQUFaO0FBQ0EsTUFBSUMsTUFBTSxHQUFHakIsQ0FBQyxDQUFDLFNBQUQsQ0FBZDtBQUNBLE1BQUlrQixZQUFZLEdBQUVELE1BQU0sQ0FBQ0UsV0FBUCxFQUFsQjtBQUVBbkIsR0FBQyxDQUFDWSxNQUFELENBQUQsQ0FBVVQsRUFBVixDQUFhLFFBQWIsRUFBc0IsWUFBVTtBQUMvQixRQUFJLENBQUNjLE1BQU0sQ0FBQ0csUUFBUCxDQUFnQixlQUFoQixDQUFMLEVBQXNDO0FBQ3JDRixrQkFBWSxHQUFFRCxNQUFNLENBQUNFLFdBQVAsRUFBZDtBQUNBO0FBQ0QsR0FKRDtBQU1BbkIsR0FBQyxDQUFDWSxNQUFELENBQUQsQ0FBVVMsTUFBVixDQUFpQixVQUFTakIsS0FBVCxFQUFlO0FBQy9CLFFBQUlrQixFQUFFLEdBQUd0QixDQUFDLENBQUMsSUFBRCxDQUFELENBQVFTLFNBQVIsRUFBVDs7QUFFQSxRQUFJYSxFQUFFLEdBQUdKLFlBQVQsRUFBc0I7QUFDckJELFlBQU0sQ0FBQ00sUUFBUCxDQUFnQixlQUFoQjtBQUNBLEtBRkQsTUFFTztBQUNOLFVBQUksQ0FBQ04sTUFBTSxDQUFDRyxRQUFQLENBQWdCLGNBQWhCLENBQUwsRUFBcUM7QUFDcENILGNBQU0sQ0FBQ0gsV0FBUCxDQUFtQiw0Q0FBbkI7QUFDQSxPQUZELE1BRU87QUFDTixZQUFJUSxFQUFFLEtBQUssQ0FBWCxFQUFhO0FBQ1pMLGdCQUFNLENBQUNILFdBQVAsQ0FBbUIsNENBQW5CO0FBQ0E7QUFDRDtBQUNEOztBQUVELFFBQUlRLEVBQUUsR0FBR1AsYUFBTCxJQUFzQk8sRUFBRSxHQUFHSixZQUEvQixFQUE0QztBQUMzQ0QsWUFBTSxDQUFDSCxXQUFQLENBQW1CLGNBQW5CO0FBQ0EsS0FGRCxNQUVPO0FBQ04sVUFBSVEsRUFBRSxHQUFHSixZQUFULEVBQXNCO0FBQ3JCLFlBQUdJLEVBQUUsR0FBR3RCLENBQUMsQ0FBQ1ksTUFBRCxDQUFELENBQVVZLE1BQVYsRUFBTCxHQUEwQnhCLENBQUMsQ0FBQ0MsUUFBRCxDQUFELENBQVl1QixNQUFaLEVBQTdCLEVBQW1EO0FBQ2xEUCxnQkFBTSxDQUFDTSxRQUFQLENBQWdCLDhCQUFoQjtBQUNBO0FBQ0Q7QUFDRDs7QUFDRE4sVUFBTSxDQUFDZCxFQUFQLENBQVUsZUFBVixFQUEwQixZQUFXO0FBQ3BDLFVBQUksQ0FBQ0gsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRb0IsUUFBUixDQUFpQixjQUFqQixDQUFMLEVBQXNDO0FBQ3JDcEIsU0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRYyxXQUFSLENBQW9CLGlCQUFwQjtBQUNBO0FBQ0QsS0FKRDtBQU1BQyxpQkFBYSxHQUFHTyxFQUFoQjtBQUNBLEdBL0JEO0FBZ0NBLENBckVEIiwiZmlsZSI6IjQ4Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHQkKCcuanMtbWVudS10b29nbGUnKS5vbignY2xpY2snLGZ1bmN0aW9uICgpe1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0JCh0aGlzKS50b2dnbGVDbGFzcygnYWN0aXZlJyk7XG5cdFx0JCgnLmhlYWRlcl9fcm93JykudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpO1xuXHRcdCQoJ2JvZHknKS50b2dnbGVDbGFzcygnbWVudS1vcGVuZWQnKTtcblx0fSk7XG5cblxuXHQkKFwiYVwiKS5vbignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuXHRcdGlmICh0aGlzLmhhc2ggIT09IFwiXCIpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR2YXIgaGFzaCA9IHRoaXMuaGFzaDtcblx0XHRcdCQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcblx0XHRcdFx0c2Nyb2xsVG9wOiAkKGhhc2gpLm9mZnNldCgpLnRvcFxuXHRcdFx0fSwgODAwLCBmdW5jdGlvbigpe1xuXHRcdFx0XHR3aW5kb3cubG9jYXRpb24uaGFzaCA9IGhhc2g7XG5cdFx0XHR9KTtcblxuXHRcdFx0JCgnLmpzLW1lbnUtdG9vZ2xlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuXHRcdFx0JCgnLmhlYWRlcl9fcm93JykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuXHRcdFx0JCgnYm9keScpLnJlbW92ZUNsYXNzKCdtZW51LW9wZW5lZCcpO1xuXHRcdH1cblx0fSk7XG5cblxuXHRsZXQgbGFzdFNjcm9sbFRvcCA9IDA7XG5cdGxldCBkZWx0YSA9IDU7XG5cdGxldCBoZWFkZXIgPSAkKCcuaGVhZGVyJyk7XG5cdGxldCBuYXZiYXJIZWlnaHQgPWhlYWRlci5vdXRlckhlaWdodCgpO1xuXG5cdCQod2luZG93KS5vbigncmVzaXplJyxmdW5jdGlvbigpe1xuXHRcdGlmICghaGVhZGVyLmhhc0NsYXNzKCdoZWFkZXItLWZpeGVkJykpe1xuXHRcdFx0bmF2YmFySGVpZ2h0ID1oZWFkZXIub3V0ZXJIZWlnaHQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdCQod2luZG93KS5zY3JvbGwoZnVuY3Rpb24oZXZlbnQpe1xuXHRcdGxldCBzdCA9ICQodGhpcykuc2Nyb2xsVG9wKCk7XG5cblx0XHRpZiAoc3QgPiBuYXZiYXJIZWlnaHQpe1xuXHRcdFx0aGVhZGVyLmFkZENsYXNzKCdoZWFkZXItLWZpeGVkJyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICghaGVhZGVyLmhhc0NsYXNzKCdoZWFkZXItLXNob3cnKSl7XG5cdFx0XHRcdGhlYWRlci5yZW1vdmVDbGFzcygnaGVhZGVyLS1maXhlZCBoZWFkZXItLXNob3cgaGVhZGVyLS1hbmltYXRlJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoc3QgPT09IDApe1xuXHRcdFx0XHRcdGhlYWRlci5yZW1vdmVDbGFzcygnaGVhZGVyLS1maXhlZCBoZWFkZXItLXNob3cgaGVhZGVyLS1hbmltYXRlJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoc3QgPiBsYXN0U2Nyb2xsVG9wICYmIHN0ID4gbmF2YmFySGVpZ2h0KXtcblx0XHRcdGhlYWRlci5yZW1vdmVDbGFzcygnaGVhZGVyLS1zaG93Jyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChzdCA+IG5hdmJhckhlaWdodCl7XG5cdFx0XHRcdGlmKHN0ICsgJCh3aW5kb3cpLmhlaWdodCgpIDwgJChkb2N1bWVudCkuaGVpZ2h0KCkpIHtcblx0XHRcdFx0XHRoZWFkZXIuYWRkQ2xhc3MoJ2hlYWRlci0tYW5pbWF0ZSBoZWFkZXItLXNob3cnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRoZWFkZXIub24oJ3RyYW5zaXRpb25lbmQnLGZ1bmN0aW9uICgpe1xuXHRcdFx0aWYgKCEkKHRoaXMpLmhhc0NsYXNzKCdoZWFkZXItLXNob3cnKSl7XG5cdFx0XHRcdCQodGhpcykucmVtb3ZlQ2xhc3MoJ2hlYWRlci0tYW5pbWF0ZScpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0bGFzdFNjcm9sbFRvcCA9IHN0O1xuXHR9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///486\n")},771:(module,__unused_webpack_exports,__webpack_require__)=>{eval('/* module decorator */ module = __webpack_require__.nmd(module);\n/* provided dependency */ var jQuery = __webpack_require__(638);\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\n/*\n    A simple jQuery modal (http://github.com/kylefox/jquery-modal)\n    Version 0.9.2\n*/\n!function (o) {\n  "object" == ( false ? 0 : _typeof(module)) && "object" == _typeof(module.exports) ? o(__webpack_require__(638), window, document) : o(jQuery, window, document);\n}(function (o, t, i, e) {\n  var s = [],\n      l = function l() {\n    return s.length ? s[s.length - 1] : null;\n  },\n      n = function n() {\n    var o,\n        t = !1;\n\n    for (o = s.length - 1; o >= 0; o--) {\n      s[o].$blocker && (s[o].$blocker.toggleClass("current", !t).toggleClass("behind", t), t = !0);\n    }\n  };\n\n  o.modal = function (t, i) {\n    var e, n;\n    if (this.$body = o("body"), this.options = o.extend({}, o.modal.defaults, i), this.options.doFade = !isNaN(parseInt(this.options.fadeDuration, 10)), this.$blocker = null, this.options.closeExisting) for (; o.modal.isActive();) {\n      o.modal.close();\n    }\n    if (s.push(this), t.is("a")) {\n      if (n = t.attr("href"), this.anchor = t, /^#/.test(n)) {\n        if (this.$elm = o(n), 1 !== this.$elm.length) return null;\n        this.$body.append(this.$elm), this.open();\n      } else this.$elm = o("<div>"), this.$body.append(this.$elm), e = function e(o, t) {\n        t.elm.remove();\n      }, this.showSpinner(), t.trigger(o.modal.AJAX_SEND), o.get(n).done(function (i) {\n        if (o.modal.isActive()) {\n          t.trigger(o.modal.AJAX_SUCCESS);\n          var s = l();\n          s.$elm.empty().append(i).on(o.modal.CLOSE, e), s.hideSpinner(), s.open(), t.trigger(o.modal.AJAX_COMPLETE);\n        }\n      }).fail(function () {\n        t.trigger(o.modal.AJAX_FAIL);\n        var i = l();\n        i.hideSpinner(), s.pop(), t.trigger(o.modal.AJAX_COMPLETE);\n      });\n    } else this.$elm = t, this.anchor = t, this.$body.append(this.$elm), this.open();\n  }, o.modal.prototype = {\n    constructor: o.modal,\n    open: function open() {\n      var t = this;\n      this.block(), this.anchor.blur(), this.options.doFade ? setTimeout(function () {\n        t.show();\n      }, this.options.fadeDuration * this.options.fadeDelay) : this.show(), o(i).off("keydown.modal").on("keydown.modal", function (o) {\n        var t = l();\n        27 === o.which && t.options.escapeClose && t.close();\n      }), this.options.clickClose && this.$blocker.click(function (t) {\n        t.target === this && o.modal.close();\n      });\n    },\n    close: function close() {\n      s.pop(), this.unblock(), this.hide(), o.modal.isActive() || o(i).off("keydown.modal");\n    },\n    block: function block() {\n      this.$elm.trigger(o.modal.BEFORE_BLOCK, [this._ctx()]), this.$body.css("overflow", "hidden"), this.$blocker = o(\'<div class="\' + this.options.blockerClass + \' blocker current"></div>\').appendTo(this.$body), n(), this.options.doFade && this.$blocker.css("opacity", 0).animate({\n        opacity: 1\n      }, this.options.fadeDuration), this.$elm.trigger(o.modal.BLOCK, [this._ctx()]);\n    },\n    unblock: function unblock(t) {\n      !t && this.options.doFade ? this.$blocker.fadeOut(this.options.fadeDuration, this.unblock.bind(this, !0)) : (this.$blocker.children().appendTo(this.$body), this.$blocker.remove(), this.$blocker = null, n(), o.modal.isActive() || this.$body.css("overflow", ""));\n    },\n    show: function show() {\n      this.$elm.trigger(o.modal.BEFORE_OPEN, [this._ctx()]), this.options.showClose && (this.closeButton = o(\'<a href="#close-modal" rel="modal:close" class="close-modal \' + this.options.closeClass + \'">\' + this.options.closeText + "</a>"), this.$elm.append(this.closeButton)), this.$elm.addClass(this.options.modalClass).appendTo(this.$blocker), this.options.doFade ? this.$elm.css({\n        opacity: 0,\n        display: "inline-block"\n      }).animate({\n        opacity: 1\n      }, this.options.fadeDuration) : this.$elm.css("display", "inline-block"), this.$elm.trigger(o.modal.OPEN, [this._ctx()]);\n    },\n    hide: function hide() {\n      this.$elm.trigger(o.modal.BEFORE_CLOSE, [this._ctx()]), this.closeButton && this.closeButton.remove();\n      var t = this;\n      this.options.doFade ? this.$elm.fadeOut(this.options.fadeDuration, function () {\n        t.$elm.trigger(o.modal.AFTER_CLOSE, [t._ctx()]);\n      }) : this.$elm.hide(0, function () {\n        t.$elm.trigger(o.modal.AFTER_CLOSE, [t._ctx()]);\n      }), this.$elm.trigger(o.modal.CLOSE, [this._ctx()]);\n    },\n    showSpinner: function showSpinner() {\n      this.options.showSpinner && (this.spinner = this.spinner || o(\'<div class="\' + this.options.modalClass + \'-spinner"></div>\').append(this.options.spinnerHtml), this.$body.append(this.spinner), this.spinner.show());\n    },\n    hideSpinner: function hideSpinner() {\n      this.spinner && this.spinner.remove();\n    },\n    _ctx: function _ctx() {\n      return {\n        elm: this.$elm,\n        $elm: this.$elm,\n        $blocker: this.$blocker,\n        options: this.options,\n        $anchor: this.anchor\n      };\n    }\n  }, o.modal.close = function (t) {\n    if (o.modal.isActive()) {\n      t && t.preventDefault();\n      var i = l();\n      return i.close(), i.$elm;\n    }\n  }, o.modal.isActive = function () {\n    return s.length > 0;\n  }, o.modal.getCurrent = l, o.modal.defaults = {\n    closeExisting: !0,\n    escapeClose: !0,\n    clickClose: !0,\n    closeText: "Close",\n    closeClass: "",\n    modalClass: "modal",\n    blockerClass: "jquery-modal",\n    spinnerHtml: \'<div class="rect1"></div><div class="rect2"></div><div class="rect3"></div><div class="rect4"></div>\',\n    showSpinner: !0,\n    showClose: !0,\n    fadeDuration: null,\n    fadeDelay: 1\n  }, o.modal.BEFORE_BLOCK = "modal:before-block", o.modal.BLOCK = "modal:block", o.modal.BEFORE_OPEN = "modal:before-open", o.modal.OPEN = "modal:open", o.modal.BEFORE_CLOSE = "modal:before-close", o.modal.CLOSE = "modal:close", o.modal.AFTER_CLOSE = "modal:after-close", o.modal.AJAX_SEND = "modal:ajax:send", o.modal.AJAX_SUCCESS = "modal:ajax:success", o.modal.AJAX_FAIL = "modal:ajax:fail", o.modal.AJAX_COMPLETE = "modal:ajax:complete", o.fn.modal = function (t) {\n    return 1 === this.length && new o.modal(this, t), this;\n  }, o(i).on("click.modal", \'a[rel~="modal:close"]\', o.modal.close), o(i).on("click.modal", \'a[rel~="modal:open"]\', function (t) {\n    t.preventDefault(), o(this).modal();\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///771\n')},944:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var intl_tel_input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(583);\n/* harmony import */ var intl_tel_input__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(intl_tel_input__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var aos__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(566);\n/* harmony import */ var aos__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(aos__WEBPACK_IMPORTED_MODULE_1__);\n/* provided dependency */ var $ = __webpack_require__(638);\n\n\n\n\n'use strict';\n\n$(document).ready(function () {\n  $('input[type=tel]').each(function () {\n    var elem = this;\n    var telInput = intl_tel_input__WEBPACK_IMPORTED_MODULE_0___default()(elem, {\n      preferredCountries: ['ru', 'rs'],\n      separateDialCode: true,\n      formatOnDisplay: true,\n      initialCountry: \"auto\",\n      utilsScript: \"https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.17/js/utils.min.js\",\n      autoPlaceholder: \"aggressive\",\n      geoIpLookup: function geoIpLookup(success, failure) {\n        $.get(\"https://ipinfo.io\", function () {}, \"jsonp\").always(function (resp) {\n          var countryCode = resp && resp.country ? resp.country : \"ru\";\n          success(countryCode);\n        });\n      }\n    });\n    $(elem).on('keyup paste change', function () {\n      $(this).val($(this).val().replace(/[A-Za-zА-Яа-яЁё]+/, ''));\n    });\n  });\n  aos__WEBPACK_IMPORTED_MODULE_1___default().init({\n    once: true,\n    offset: 250,\n    duration: 500\n  });\n\n  if ($('.o-slider').length > 0) {\n    $('.o-slider__inner').slick({\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      infinite: false,\n      nextArrow: '.o-slider__button--next',\n      prevArrow: '.o-slider__button--prev',\n      responsive: [{\n        breakpoint: 1099,\n        settings: {\n          adaptiveHeight: true\n        }\n      }]\n    });\n    $('.o-slider__inner').on('beforeChange', function (event, slick, currentSlide, nextSlide) {\n      setActiveStep(nextSlide);\n    });\n    $('.o-slider__inner').on('afterChange', function (event, slick, currentSlide, nextSlide) {\n      $('.o-slider__inner .slick-slide').find('.o-slider__item').css('opacity', 1);\n    });\n    $('.step').on('click', function () {\n      event.preventDefault();\n      var index = $(this).index();\n      var current = $('.o-slider__inner').slick('slickCurrentSlide');\n\n      if (Math.abs(current - index) > 1) {\n        if (index > current) {\n          for (var i = current + 1; i < index; i++) {\n            $('.o-slider__inner .slick-slide').eq(i).find('.o-slider__item').css('opacity', 0);\n          }\n        } else {\n          for (var i = index + 1; i < current; i++) {\n            $('.o-slider__inner .slick-slide').eq(i).find('.o-slider__item').css('opacity', 0);\n          }\n        }\n      }\n\n      $('.o-slider__inner').slick('slickGoTo', index);\n    });\n\n    function setActiveStep(nextSlide) {\n      var steps = $('.steps__inner .step');\n      steps.removeClass('step--active step--current');\n\n      for (var i = 0; i < nextSlide + 1; i++) {\n        steps.eq(i).addClass('step--active');\n      }\n\n      steps.eq(nextSlide).addClass('step--current');\n      var left = steps.eq(nextSlide).position().left;\n      var leftPadding = parseInt(steps.eq(nextSlide).parent().css('padding-left'));\n      $('.steps').stop().animate({\n        scrollLeft: left - leftPadding\n      }, 300);\n    }\n\n    $(window).resize(function () {\n      var left = $('.step--current').position().left;\n      var leftPadding = parseInt($('.step--current').parent().css('padding-left'));\n      $('.steps').stop().scrollLeft(left - leftPadding);\n    });\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///944\n")},920:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var ion_rangeslider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(141);\n/* harmony import */ var ion_rangeslider__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ion_rangeslider__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var intl_tel_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(583);\n/* harmony import */ var intl_tel_input__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(intl_tel_input__WEBPACK_IMPORTED_MODULE_1__);\n/* provided dependency */ var $ = __webpack_require__(638);\n\n\n\n\n\n$(document).ready(function () {\n  $(\".js-range-slider\").ionRangeSlider({\n    min: 1,\n    max: 100,\n    from: 40,\n    max_postfix: \"+\"\n  });\n  $('.js-modal').on('click', function () {\n    event.preventDefault();\n    var type = $(this).data('type');\n\n    if (type) {\n      $('#mainModal input[name=type]').prop(\"checked\", false);\n      $('#mainModal input[name=type][value=\"' + type + '\"]').prop(\"checked\", true);\n    }\n\n    $('#mainModal').modal({\n      showClose: false,\n      fadeDuration: 100\n    });\n    return false;\n  });\n  $('#modalForm').on('submit', function () {\n    event.preventDefault();\n    var validPhone = true;\n    $(this).find('input[type=tel]').each(function () {\n      var elem = this;\n      var telInput = window.intlTelInputGlobals.getInstance(elem);\n      var isValid = telInput.isValidNumber();\n      if (!isValid) validPhone = false;\n    });\n\n    if (validPhone) {\n      var data = $(this).serialize();\n      $.ajax({\n        url: '/php/mail.php',\n        method: 'post',\n        dataType: 'json',\n        data: data,\n        success: function success(data) {\n          if (data.status === 'ok') {\n            $('#modalForm').clear();\n            $('#thanksModal').modal({\n              showClose: false,\n              fadeDuration: 100\n            });\n          }\n        }\n      });\n    }\n  });\n  $('#askForm').on('submit', function () {\n    event.preventDefault();\n    var validPhone = true;\n    $(this).find('input[type=tel]').each(function () {\n      var elem = this;\n      var telInput = window.intlTelInputGlobals.getInstance(elem);\n      var isValid = telInput.isValidNumber();\n      if (!isValid) validPhone = false;\n    });\n\n    if (validPhone) {\n      var data = $(this).serialize();\n      $.ajax({\n        url: '/php/mail.php',\n        method: 'post',\n        dataType: 'json',\n        data: data,\n        success: function success(data) {\n          if (data.status === 'ok') {\n            $('#askForm').clear();\n            $('#thanksModal').modal({\n              showClose: false,\n              fadeDuration: 100\n            });\n          }\n        }\n      });\n    }\n  });\n  var scrollWidth = window.innerWidth - $(document).width();\n  $('#mainModal,#askForm,#modalForm').on($.modal.BEFORE_BLOCK, function (event, modal) {\n    $('.wrapper,.header').css('padding-right', scrollWidth);\n    $('.header-right').css('border-right-width', scrollWidth);\n  });\n  $('#mainModal,#askForm,#modalForm').on($.modal.AFTER_CLOSE, function (event, modal) {\n    $('.wrapper,.header').css('padding-right', '');\n    $('.header-right').css('border-right-width', '');\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///920\n")},392:(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\r\n     _ _      _       _\r\n ___| (_) ___| | __  (_)___\r\n/ __| | |/ __| |/ /  | / __|\r\n\\__ \\ | | (__|   < _ | \\__ \\\r\n|___/_|_|\\___|_|\\_(_)/ |___/\r\n                   |__/\r\n\r\n Version: 1.8.0\r\n  Author: Ken Wheeler\r\n Website: http://kenwheeler.github.io\r\n    Docs: http://kenwheeler.github.io/slick\r\n    Repo: http://github.com/kenwheeler/slick\r\n  Issues: http://github.com/kenwheeler/slick/issues\r\n\r\n */\n\n/* global window, document, define, jQuery, setInterval, clearInterval */\n;\n\n(function (factory) {\n  'use strict';\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(638)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(function ($) {\n  'use strict';\n\n  var Slick = window.Slick || {};\n\n  Slick = function () {\n    var instanceUid = 0;\n\n    function Slick(element, settings) {\n      var _ = this,\n          dataSettings;\n\n      _.defaults = {\n        accessibility: true,\n        adaptiveHeight: false,\n        appendArrows: $(element),\n        appendDots: $(element),\n        arrows: true,\n        asNavFor: null,\n        prevArrow: '<button class=\"slick-prev\" aria-label=\"Previous\" type=\"button\">Previous</button>',\n        nextArrow: '<button class=\"slick-next\" aria-label=\"Next\" type=\"button\">Next</button>',\n        autoplay: false,\n        autoplaySpeed: 3000,\n        centerMode: false,\n        centerPadding: '50px',\n        cssEase: 'ease',\n        customPaging: function customPaging(slider, i) {\n          return $('<button type=\"button\" />').text(i + 1);\n        },\n        dots: false,\n        dotsClass: 'slick-dots',\n        draggable: true,\n        easing: 'linear',\n        edgeFriction: 0.35,\n        fade: false,\n        focusOnSelect: false,\n        focusOnChange: false,\n        infinite: true,\n        initialSlide: 0,\n        lazyLoad: 'ondemand',\n        mobileFirst: false,\n        pauseOnHover: true,\n        pauseOnFocus: true,\n        pauseOnDotsHover: false,\n        respondTo: 'window',\n        responsive: null,\n        rows: 1,\n        rtl: false,\n        slide: '',\n        slidesPerRow: 1,\n        slidesToShow: 1,\n        slidesToScroll: 1,\n        speed: 500,\n        swipe: true,\n        swipeToSlide: false,\n        touchMove: true,\n        touchThreshold: 5,\n        useCSS: true,\n        useTransform: true,\n        variableWidth: false,\n        vertical: false,\n        verticalSwiping: false,\n        waitForAnimate: true,\n        zIndex: 1000\n      };\n      _.initials = {\n        animating: false,\n        dragging: false,\n        autoPlayTimer: null,\n        currentDirection: 0,\n        currentLeft: null,\n        currentSlide: 0,\n        direction: 1,\n        $dots: null,\n        listWidth: null,\n        listHeight: null,\n        loadIndex: 0,\n        $nextArrow: null,\n        $prevArrow: null,\n        scrolling: false,\n        slideCount: null,\n        slideWidth: null,\n        $slideTrack: null,\n        $slides: null,\n        sliding: false,\n        slideOffset: 0,\n        swipeLeft: null,\n        swiping: false,\n        $list: null,\n        touchObject: {},\n        transformsEnabled: false,\n        unslicked: false\n      };\n      $.extend(_, _.initials);\n      _.activeBreakpoint = null;\n      _.animType = null;\n      _.animProp = null;\n      _.breakpoints = [];\n      _.breakpointSettings = [];\n      _.cssTransitions = false;\n      _.focussed = false;\n      _.interrupted = false;\n      _.hidden = 'hidden';\n      _.paused = true;\n      _.positionProp = null;\n      _.respondTo = null;\n      _.rowCount = 1;\n      _.shouldClick = true;\n      _.$slider = $(element);\n      _.$slidesCache = null;\n      _.transformType = null;\n      _.transitionType = null;\n      _.visibilityChange = 'visibilitychange';\n      _.windowWidth = 0;\n      _.windowTimer = null;\n      dataSettings = $(element).data('slick') || {};\n      _.options = $.extend({}, _.defaults, settings, dataSettings);\n      _.currentSlide = _.options.initialSlide;\n      _.originalSettings = _.options;\n\n      if (typeof document.mozHidden !== 'undefined') {\n        _.hidden = 'mozHidden';\n        _.visibilityChange = 'mozvisibilitychange';\n      } else if (typeof document.webkitHidden !== 'undefined') {\n        _.hidden = 'webkitHidden';\n        _.visibilityChange = 'webkitvisibilitychange';\n      }\n\n      _.autoPlay = $.proxy(_.autoPlay, _);\n      _.autoPlayClear = $.proxy(_.autoPlayClear, _);\n      _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);\n      _.changeSlide = $.proxy(_.changeSlide, _);\n      _.clickHandler = $.proxy(_.clickHandler, _);\n      _.selectHandler = $.proxy(_.selectHandler, _);\n      _.setPosition = $.proxy(_.setPosition, _);\n      _.swipeHandler = $.proxy(_.swipeHandler, _);\n      _.dragHandler = $.proxy(_.dragHandler, _);\n      _.keyHandler = $.proxy(_.keyHandler, _);\n      _.instanceUid = instanceUid++; // A simple way to check for HTML strings\n      // Strict HTML recognition (must start with <)\n      // Extracted from jQuery v1.11 source\n\n      _.htmlExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*)$/;\n\n      _.registerBreakpoints();\n\n      _.init(true);\n    }\n\n    return Slick;\n  }();\n\n  Slick.prototype.activateADA = function () {\n    var _ = this;\n\n    _.$slideTrack.find('.slick-active').attr({\n      'aria-hidden': 'false'\n    }).find('a, input, button, select').attr({\n      'tabindex': '0'\n    });\n  };\n\n  Slick.prototype.addSlide = Slick.prototype.slickAdd = function (markup, index, addBefore) {\n    var _ = this;\n\n    if (typeof index === 'boolean') {\n      addBefore = index;\n      index = null;\n    } else if (index < 0 || index >= _.slideCount) {\n      return false;\n    }\n\n    _.unload();\n\n    if (typeof index === 'number') {\n      if (index === 0 && _.$slides.length === 0) {\n        $(markup).appendTo(_.$slideTrack);\n      } else if (addBefore) {\n        $(markup).insertBefore(_.$slides.eq(index));\n      } else {\n        $(markup).insertAfter(_.$slides.eq(index));\n      }\n    } else {\n      if (addBefore === true) {\n        $(markup).prependTo(_.$slideTrack);\n      } else {\n        $(markup).appendTo(_.$slideTrack);\n      }\n    }\n\n    _.$slides = _.$slideTrack.children(this.options.slide);\n\n    _.$slideTrack.children(this.options.slide).detach();\n\n    _.$slideTrack.append(_.$slides);\n\n    _.$slides.each(function (index, element) {\n      $(element).attr('data-slick-index', index);\n    });\n\n    _.$slidesCache = _.$slides;\n\n    _.reinit();\n  };\n\n  Slick.prototype.animateHeight = function () {\n    var _ = this;\n\n    if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\n      var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\n\n      _.$list.animate({\n        height: targetHeight\n      }, _.options.speed);\n    }\n  };\n\n  Slick.prototype.animateSlide = function (targetLeft, callback) {\n    var animProps = {},\n        _ = this;\n\n    _.animateHeight();\n\n    if (_.options.rtl === true && _.options.vertical === false) {\n      targetLeft = -targetLeft;\n    }\n\n    if (_.transformsEnabled === false) {\n      if (_.options.vertical === false) {\n        _.$slideTrack.animate({\n          left: targetLeft\n        }, _.options.speed, _.options.easing, callback);\n      } else {\n        _.$slideTrack.animate({\n          top: targetLeft\n        }, _.options.speed, _.options.easing, callback);\n      }\n    } else {\n      if (_.cssTransitions === false) {\n        if (_.options.rtl === true) {\n          _.currentLeft = -_.currentLeft;\n        }\n\n        $({\n          animStart: _.currentLeft\n        }).animate({\n          animStart: targetLeft\n        }, {\n          duration: _.options.speed,\n          easing: _.options.easing,\n          step: function step(now) {\n            now = Math.ceil(now);\n\n            if (_.options.vertical === false) {\n              animProps[_.animType] = 'translate(' + now + 'px, 0px)';\n\n              _.$slideTrack.css(animProps);\n            } else {\n              animProps[_.animType] = 'translate(0px,' + now + 'px)';\n\n              _.$slideTrack.css(animProps);\n            }\n          },\n          complete: function complete() {\n            if (callback) {\n              callback.call();\n            }\n          }\n        });\n      } else {\n        _.applyTransition();\n\n        targetLeft = Math.ceil(targetLeft);\n\n        if (_.options.vertical === false) {\n          animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';\n        } else {\n          animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';\n        }\n\n        _.$slideTrack.css(animProps);\n\n        if (callback) {\n          setTimeout(function () {\n            _.disableTransition();\n\n            callback.call();\n          }, _.options.speed);\n        }\n      }\n    }\n  };\n\n  Slick.prototype.getNavTarget = function () {\n    var _ = this,\n        asNavFor = _.options.asNavFor;\n\n    if (asNavFor && asNavFor !== null) {\n      asNavFor = $(asNavFor).not(_.$slider);\n    }\n\n    return asNavFor;\n  };\n\n  Slick.prototype.asNavFor = function (index) {\n    var _ = this,\n        asNavFor = _.getNavTarget();\n\n    if (asNavFor !== null && _typeof(asNavFor) === 'object') {\n      asNavFor.each(function () {\n        var target = $(this).slick('getSlick');\n\n        if (!target.unslicked) {\n          target.slideHandler(index, true);\n        }\n      });\n    }\n  };\n\n  Slick.prototype.applyTransition = function (slide) {\n    var _ = this,\n        transition = {};\n\n    if (_.options.fade === false) {\n      transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;\n    } else {\n      transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;\n    }\n\n    if (_.options.fade === false) {\n      _.$slideTrack.css(transition);\n    } else {\n      _.$slides.eq(slide).css(transition);\n    }\n  };\n\n  Slick.prototype.autoPlay = function () {\n    var _ = this;\n\n    _.autoPlayClear();\n\n    if (_.slideCount > _.options.slidesToShow) {\n      _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);\n    }\n  };\n\n  Slick.prototype.autoPlayClear = function () {\n    var _ = this;\n\n    if (_.autoPlayTimer) {\n      clearInterval(_.autoPlayTimer);\n    }\n  };\n\n  Slick.prototype.autoPlayIterator = function () {\n    var _ = this,\n        slideTo = _.currentSlide + _.options.slidesToScroll;\n\n    if (!_.paused && !_.interrupted && !_.focussed) {\n      if (_.options.infinite === false) {\n        if (_.direction === 1 && _.currentSlide + 1 === _.slideCount - 1) {\n          _.direction = 0;\n        } else if (_.direction === 0) {\n          slideTo = _.currentSlide - _.options.slidesToScroll;\n\n          if (_.currentSlide - 1 === 0) {\n            _.direction = 1;\n          }\n        }\n      }\n\n      _.slideHandler(slideTo);\n    }\n  };\n\n  Slick.prototype.buildArrows = function () {\n    var _ = this;\n\n    if (_.options.arrows === true) {\n      _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');\n      _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');\n\n      if (_.slideCount > _.options.slidesToShow) {\n        _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\n\n        _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\n\n        if (_.htmlExpr.test(_.options.prevArrow)) {\n          _.$prevArrow.prependTo(_.options.appendArrows);\n        }\n\n        if (_.htmlExpr.test(_.options.nextArrow)) {\n          _.$nextArrow.appendTo(_.options.appendArrows);\n        }\n\n        if (_.options.infinite !== true) {\n          _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n        }\n      } else {\n        _.$prevArrow.add(_.$nextArrow).addClass('slick-hidden').attr({\n          'aria-disabled': 'true',\n          'tabindex': '-1'\n        });\n      }\n    }\n  };\n\n  Slick.prototype.buildDots = function () {\n    var _ = this,\n        i,\n        dot;\n\n    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n      _.$slider.addClass('slick-dotted');\n\n      dot = $('<ul />').addClass(_.options.dotsClass);\n\n      for (i = 0; i <= _.getDotCount(); i += 1) {\n        dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));\n      }\n\n      _.$dots = dot.appendTo(_.options.appendDots);\n\n      _.$dots.find('li').first().addClass('slick-active');\n    }\n  };\n\n  Slick.prototype.buildOut = function () {\n    var _ = this;\n\n    _.$slides = _.$slider.children(_.options.slide + ':not(.slick-cloned)').addClass('slick-slide');\n    _.slideCount = _.$slides.length;\n\n    _.$slides.each(function (index, element) {\n      $(element).attr('data-slick-index', index).data('originalStyling', $(element).attr('style') || '');\n    });\n\n    _.$slider.addClass('slick-slider');\n\n    _.$slideTrack = _.slideCount === 0 ? $('<div class=\"slick-track\"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class=\"slick-track\"/>').parent();\n    _.$list = _.$slideTrack.wrap('<div class=\"slick-list\"/>').parent();\n\n    _.$slideTrack.css('opacity', 0);\n\n    if (_.options.centerMode === true || _.options.swipeToSlide === true) {\n      _.options.slidesToScroll = 1;\n    }\n\n    $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');\n\n    _.setupInfinite();\n\n    _.buildArrows();\n\n    _.buildDots();\n\n    _.updateDots();\n\n    _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\n\n    if (_.options.draggable === true) {\n      _.$list.addClass('draggable');\n    }\n  };\n\n  Slick.prototype.buildRows = function () {\n    var _ = this,\n        a,\n        b,\n        c,\n        newSlides,\n        numOfSlides,\n        originalSlides,\n        slidesPerSection;\n\n    newSlides = document.createDocumentFragment();\n    originalSlides = _.$slider.children();\n\n    if (_.options.rows > 0) {\n      slidesPerSection = _.options.slidesPerRow * _.options.rows;\n      numOfSlides = Math.ceil(originalSlides.length / slidesPerSection);\n\n      for (a = 0; a < numOfSlides; a++) {\n        var slide = document.createElement('div');\n\n        for (b = 0; b < _.options.rows; b++) {\n          var row = document.createElement('div');\n\n          for (c = 0; c < _.options.slidesPerRow; c++) {\n            var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);\n\n            if (originalSlides.get(target)) {\n              row.appendChild(originalSlides.get(target));\n            }\n          }\n\n          slide.appendChild(row);\n        }\n\n        newSlides.appendChild(slide);\n      }\n\n      _.$slider.empty().append(newSlides);\n\n      _.$slider.children().children().children().css({\n        'width': 100 / _.options.slidesPerRow + '%',\n        'display': 'inline-block'\n      });\n    }\n  };\n\n  Slick.prototype.checkResponsive = function (initial, forceUpdate) {\n    var _ = this,\n        breakpoint,\n        targetBreakpoint,\n        respondToWidth,\n        triggerBreakpoint = false;\n\n    var sliderWidth = _.$slider.width();\n\n    var windowWidth = window.innerWidth || $(window).width();\n\n    if (_.respondTo === 'window') {\n      respondToWidth = windowWidth;\n    } else if (_.respondTo === 'slider') {\n      respondToWidth = sliderWidth;\n    } else if (_.respondTo === 'min') {\n      respondToWidth = Math.min(windowWidth, sliderWidth);\n    }\n\n    if (_.options.responsive && _.options.responsive.length && _.options.responsive !== null) {\n      targetBreakpoint = null;\n\n      for (breakpoint in _.breakpoints) {\n        if (_.breakpoints.hasOwnProperty(breakpoint)) {\n          if (_.originalSettings.mobileFirst === false) {\n            if (respondToWidth < _.breakpoints[breakpoint]) {\n              targetBreakpoint = _.breakpoints[breakpoint];\n            }\n          } else {\n            if (respondToWidth > _.breakpoints[breakpoint]) {\n              targetBreakpoint = _.breakpoints[breakpoint];\n            }\n          }\n        }\n      }\n\n      if (targetBreakpoint !== null) {\n        if (_.activeBreakpoint !== null) {\n          if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {\n            _.activeBreakpoint = targetBreakpoint;\n\n            if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\n              _.unslick(targetBreakpoint);\n            } else {\n              _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);\n\n              if (initial === true) {\n                _.currentSlide = _.options.initialSlide;\n              }\n\n              _.refresh(initial);\n            }\n\n            triggerBreakpoint = targetBreakpoint;\n          }\n        } else {\n          _.activeBreakpoint = targetBreakpoint;\n\n          if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\n            _.unslick(targetBreakpoint);\n          } else {\n            _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);\n\n            if (initial === true) {\n              _.currentSlide = _.options.initialSlide;\n            }\n\n            _.refresh(initial);\n          }\n\n          triggerBreakpoint = targetBreakpoint;\n        }\n      } else {\n        if (_.activeBreakpoint !== null) {\n          _.activeBreakpoint = null;\n          _.options = _.originalSettings;\n\n          if (initial === true) {\n            _.currentSlide = _.options.initialSlide;\n          }\n\n          _.refresh(initial);\n\n          triggerBreakpoint = targetBreakpoint;\n        }\n      } // only trigger breakpoints during an actual break. not on initialize.\n\n\n      if (!initial && triggerBreakpoint !== false) {\n        _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);\n      }\n    }\n  };\n\n  Slick.prototype.changeSlide = function (event, dontAnimate) {\n    var _ = this,\n        $target = $(event.currentTarget),\n        indexOffset,\n        slideOffset,\n        unevenOffset; // If target is a link, prevent default action.\n\n\n    if ($target.is('a')) {\n      event.preventDefault();\n    } // If target is not the <li> element (ie: a child), find the <li>.\n\n\n    if (!$target.is('li')) {\n      $target = $target.closest('li');\n    }\n\n    unevenOffset = _.slideCount % _.options.slidesToScroll !== 0;\n    indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;\n\n    switch (event.data.message) {\n      case 'previous':\n        slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;\n\n        if (_.slideCount > _.options.slidesToShow) {\n          _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);\n        }\n\n        break;\n\n      case 'next':\n        slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;\n\n        if (_.slideCount > _.options.slidesToShow) {\n          _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);\n        }\n\n        break;\n\n      case 'index':\n        var index = event.data.index === 0 ? 0 : event.data.index || $target.index() * _.options.slidesToScroll;\n\n        _.slideHandler(_.checkNavigable(index), false, dontAnimate);\n\n        $target.children().trigger('focus');\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  Slick.prototype.checkNavigable = function (index) {\n    var _ = this,\n        navigables,\n        prevNavigable;\n\n    navigables = _.getNavigableIndexes();\n    prevNavigable = 0;\n\n    if (index > navigables[navigables.length - 1]) {\n      index = navigables[navigables.length - 1];\n    } else {\n      for (var n in navigables) {\n        if (index < navigables[n]) {\n          index = prevNavigable;\n          break;\n        }\n\n        prevNavigable = navigables[n];\n      }\n    }\n\n    return index;\n  };\n\n  Slick.prototype.cleanUpEvents = function () {\n    var _ = this;\n\n    if (_.options.dots && _.$dots !== null) {\n      $('li', _.$dots).off('click.slick', _.changeSlide).off('mouseenter.slick', $.proxy(_.interrupt, _, true)).off('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n      if (_.options.accessibility === true) {\n        _.$dots.off('keydown.slick', _.keyHandler);\n      }\n    }\n\n    _.$slider.off('focus.slick blur.slick');\n\n    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n      _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);\n      _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);\n\n      if (_.options.accessibility === true) {\n        _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);\n        _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);\n      }\n    }\n\n    _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);\n\n    _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);\n\n    _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);\n\n    _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);\n\n    _.$list.off('click.slick', _.clickHandler);\n\n    $(document).off(_.visibilityChange, _.visibility);\n\n    _.cleanUpSlideEvents();\n\n    if (_.options.accessibility === true) {\n      _.$list.off('keydown.slick', _.keyHandler);\n    }\n\n    if (_.options.focusOnSelect === true) {\n      $(_.$slideTrack).children().off('click.slick', _.selectHandler);\n    }\n\n    $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);\n    $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);\n    $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);\n    $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);\n  };\n\n  Slick.prototype.cleanUpSlideEvents = function () {\n    var _ = this;\n\n    _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));\n\n    _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));\n  };\n\n  Slick.prototype.cleanUpRows = function () {\n    var _ = this,\n        originalSlides;\n\n    if (_.options.rows > 0) {\n      originalSlides = _.$slides.children().children();\n      originalSlides.removeAttr('style');\n\n      _.$slider.empty().append(originalSlides);\n    }\n  };\n\n  Slick.prototype.clickHandler = function (event) {\n    var _ = this;\n\n    if (_.shouldClick === false) {\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  };\n\n  Slick.prototype.destroy = function (refresh) {\n    var _ = this;\n\n    _.autoPlayClear();\n\n    _.touchObject = {};\n\n    _.cleanUpEvents();\n\n    $('.slick-cloned', _.$slider).detach();\n\n    if (_.$dots) {\n      _.$dots.remove();\n    }\n\n    if (_.$prevArrow && _.$prevArrow.length) {\n      _.$prevArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');\n\n      if (_.htmlExpr.test(_.options.prevArrow)) {\n        _.$prevArrow.remove();\n      }\n    }\n\n    if (_.$nextArrow && _.$nextArrow.length) {\n      _.$nextArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');\n\n      if (_.htmlExpr.test(_.options.nextArrow)) {\n        _.$nextArrow.remove();\n      }\n    }\n\n    if (_.$slides) {\n      _.$slides.removeClass('slick-slide slick-active slick-center slick-visible slick-current').removeAttr('aria-hidden').removeAttr('data-slick-index').each(function () {\n        $(this).attr('style', $(this).data('originalStyling'));\n      });\n\n      _.$slideTrack.children(this.options.slide).detach();\n\n      _.$slideTrack.detach();\n\n      _.$list.detach();\n\n      _.$slider.append(_.$slides);\n    }\n\n    _.cleanUpRows();\n\n    _.$slider.removeClass('slick-slider');\n\n    _.$slider.removeClass('slick-initialized');\n\n    _.$slider.removeClass('slick-dotted');\n\n    _.unslicked = true;\n\n    if (!refresh) {\n      _.$slider.trigger('destroy', [_]);\n    }\n  };\n\n  Slick.prototype.disableTransition = function (slide) {\n    var _ = this,\n        transition = {};\n\n    transition[_.transitionType] = '';\n\n    if (_.options.fade === false) {\n      _.$slideTrack.css(transition);\n    } else {\n      _.$slides.eq(slide).css(transition);\n    }\n  };\n\n  Slick.prototype.fadeSlide = function (slideIndex, callback) {\n    var _ = this;\n\n    if (_.cssTransitions === false) {\n      _.$slides.eq(slideIndex).css({\n        zIndex: _.options.zIndex\n      });\n\n      _.$slides.eq(slideIndex).animate({\n        opacity: 1\n      }, _.options.speed, _.options.easing, callback);\n    } else {\n      _.applyTransition(slideIndex);\n\n      _.$slides.eq(slideIndex).css({\n        opacity: 1,\n        zIndex: _.options.zIndex\n      });\n\n      if (callback) {\n        setTimeout(function () {\n          _.disableTransition(slideIndex);\n\n          callback.call();\n        }, _.options.speed);\n      }\n    }\n  };\n\n  Slick.prototype.fadeSlideOut = function (slideIndex) {\n    var _ = this;\n\n    if (_.cssTransitions === false) {\n      _.$slides.eq(slideIndex).animate({\n        opacity: 0,\n        zIndex: _.options.zIndex - 2\n      }, _.options.speed, _.options.easing);\n    } else {\n      _.applyTransition(slideIndex);\n\n      _.$slides.eq(slideIndex).css({\n        opacity: 0,\n        zIndex: _.options.zIndex - 2\n      });\n    }\n  };\n\n  Slick.prototype.filterSlides = Slick.prototype.slickFilter = function (filter) {\n    var _ = this;\n\n    if (filter !== null) {\n      _.$slidesCache = _.$slides;\n\n      _.unload();\n\n      _.$slideTrack.children(this.options.slide).detach();\n\n      _.$slidesCache.filter(filter).appendTo(_.$slideTrack);\n\n      _.reinit();\n    }\n  };\n\n  Slick.prototype.focusHandler = function () {\n    var _ = this;\n\n    _.$slider.off('focus.slick blur.slick').on('focus.slick blur.slick', '*', function (event) {\n      event.stopImmediatePropagation();\n      var $sf = $(this);\n      setTimeout(function () {\n        if (_.options.pauseOnFocus) {\n          _.focussed = $sf.is(':focus');\n\n          _.autoPlay();\n        }\n      }, 0);\n    });\n  };\n\n  Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function () {\n    var _ = this;\n\n    return _.currentSlide;\n  };\n\n  Slick.prototype.getDotCount = function () {\n    var _ = this;\n\n    var breakPoint = 0;\n    var counter = 0;\n    var pagerQty = 0;\n\n    if (_.options.infinite === true) {\n      if (_.slideCount <= _.options.slidesToShow) {\n        ++pagerQty;\n      } else {\n        while (breakPoint < _.slideCount) {\n          ++pagerQty;\n          breakPoint = counter + _.options.slidesToScroll;\n          counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n        }\n      }\n    } else if (_.options.centerMode === true) {\n      pagerQty = _.slideCount;\n    } else if (!_.options.asNavFor) {\n      pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);\n    } else {\n      while (breakPoint < _.slideCount) {\n        ++pagerQty;\n        breakPoint = counter + _.options.slidesToScroll;\n        counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n      }\n    }\n\n    return pagerQty - 1;\n  };\n\n  Slick.prototype.getLeft = function (slideIndex) {\n    var _ = this,\n        targetLeft,\n        verticalHeight,\n        verticalOffset = 0,\n        targetSlide,\n        coef;\n\n    _.slideOffset = 0;\n    verticalHeight = _.$slides.first().outerHeight(true);\n\n    if (_.options.infinite === true) {\n      if (_.slideCount > _.options.slidesToShow) {\n        _.slideOffset = _.slideWidth * _.options.slidesToShow * -1;\n        coef = -1;\n\n        if (_.options.vertical === true && _.options.centerMode === true) {\n          if (_.options.slidesToShow === 2) {\n            coef = -1.5;\n          } else if (_.options.slidesToShow === 1) {\n            coef = -2;\n          }\n        }\n\n        verticalOffset = verticalHeight * _.options.slidesToShow * coef;\n      }\n\n      if (_.slideCount % _.options.slidesToScroll !== 0) {\n        if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {\n          if (slideIndex > _.slideCount) {\n            _.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1;\n            verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1;\n          } else {\n            _.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1;\n            verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1;\n          }\n        }\n      }\n    } else {\n      if (slideIndex + _.options.slidesToShow > _.slideCount) {\n        _.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth;\n        verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight;\n      }\n    }\n\n    if (_.slideCount <= _.options.slidesToShow) {\n      _.slideOffset = 0;\n      verticalOffset = 0;\n    }\n\n    if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {\n      _.slideOffset = _.slideWidth * Math.floor(_.options.slidesToShow) / 2 - _.slideWidth * _.slideCount / 2;\n    } else if (_.options.centerMode === true && _.options.infinite === true) {\n      _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;\n    } else if (_.options.centerMode === true) {\n      _.slideOffset = 0;\n      _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);\n    }\n\n    if (_.options.vertical === false) {\n      targetLeft = slideIndex * _.slideWidth * -1 + _.slideOffset;\n    } else {\n      targetLeft = slideIndex * verticalHeight * -1 + verticalOffset;\n    }\n\n    if (_.options.variableWidth === true) {\n      if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\n        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\n      } else {\n        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);\n      }\n\n      if (_.options.rtl === true) {\n        if (targetSlide[0]) {\n          targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\n        } else {\n          targetLeft = 0;\n        }\n      } else {\n        targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\n      }\n\n      if (_.options.centerMode === true) {\n        if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\n          targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\n        } else {\n          targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);\n        }\n\n        if (_.options.rtl === true) {\n          if (targetSlide[0]) {\n            targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\n          } else {\n            targetLeft = 0;\n          }\n        } else {\n          targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\n        }\n\n        targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;\n      }\n    }\n\n    return targetLeft;\n  };\n\n  Slick.prototype.getOption = Slick.prototype.slickGetOption = function (option) {\n    var _ = this;\n\n    return _.options[option];\n  };\n\n  Slick.prototype.getNavigableIndexes = function () {\n    var _ = this,\n        breakPoint = 0,\n        counter = 0,\n        indexes = [],\n        max;\n\n    if (_.options.infinite === false) {\n      max = _.slideCount;\n    } else {\n      breakPoint = _.options.slidesToScroll * -1;\n      counter = _.options.slidesToScroll * -1;\n      max = _.slideCount * 2;\n    }\n\n    while (breakPoint < max) {\n      indexes.push(breakPoint);\n      breakPoint = counter + _.options.slidesToScroll;\n      counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n    }\n\n    return indexes;\n  };\n\n  Slick.prototype.getSlick = function () {\n    return this;\n  };\n\n  Slick.prototype.getSlideCount = function () {\n    var _ = this,\n        slidesTraversed,\n        swipedSlide,\n        centerOffset;\n\n    centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;\n\n    if (_.options.swipeToSlide === true) {\n      _.$slideTrack.find('.slick-slide').each(function (index, slide) {\n        if (slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > _.swipeLeft * -1) {\n          swipedSlide = slide;\n          return false;\n        }\n      });\n\n      slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;\n      return slidesTraversed;\n    } else {\n      return _.options.slidesToScroll;\n    }\n  };\n\n  Slick.prototype.goTo = Slick.prototype.slickGoTo = function (slide, dontAnimate) {\n    var _ = this;\n\n    _.changeSlide({\n      data: {\n        message: 'index',\n        index: parseInt(slide)\n      }\n    }, dontAnimate);\n  };\n\n  Slick.prototype.init = function (creation) {\n    var _ = this;\n\n    if (!$(_.$slider).hasClass('slick-initialized')) {\n      $(_.$slider).addClass('slick-initialized');\n\n      _.buildRows();\n\n      _.buildOut();\n\n      _.setProps();\n\n      _.startLoad();\n\n      _.loadSlider();\n\n      _.initializeEvents();\n\n      _.updateArrows();\n\n      _.updateDots();\n\n      _.checkResponsive(true);\n\n      _.focusHandler();\n    }\n\n    if (creation) {\n      _.$slider.trigger('init', [_]);\n    }\n\n    if (_.options.accessibility === true) {\n      _.initADA();\n    }\n\n    if (_.options.autoplay) {\n      _.paused = false;\n\n      _.autoPlay();\n    }\n  };\n\n  Slick.prototype.initADA = function () {\n    var _ = this,\n        numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),\n        tabControlIndexes = _.getNavigableIndexes().filter(function (val) {\n      return val >= 0 && val < _.slideCount;\n    });\n\n    _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({\n      'aria-hidden': 'true',\n      'tabindex': '-1'\n    }).find('a, input, button, select').attr({\n      'tabindex': '-1'\n    });\n\n    if (_.$dots !== null) {\n      _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function (i) {\n        var slideControlIndex = tabControlIndexes.indexOf(i);\n        $(this).attr({\n          'role': 'tabpanel',\n          'id': 'slick-slide' + _.instanceUid + i,\n          'tabindex': -1\n        });\n\n        if (slideControlIndex !== -1) {\n          var ariaButtonControl = 'slick-slide-control' + _.instanceUid + slideControlIndex;\n\n          if ($('#' + ariaButtonControl).length) {\n            $(this).attr({\n              'aria-describedby': ariaButtonControl\n            });\n          }\n        }\n      });\n\n      _.$dots.attr('role', 'tablist').find('li').each(function (i) {\n        var mappedSlideIndex = tabControlIndexes[i];\n        $(this).attr({\n          'role': 'presentation'\n        });\n        $(this).find('button').first().attr({\n          'role': 'tab',\n          'id': 'slick-slide-control' + _.instanceUid + i,\n          'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,\n          'aria-label': i + 1 + ' of ' + numDotGroups,\n          'aria-selected': null,\n          'tabindex': '-1'\n        });\n      }).eq(_.currentSlide).find('button').attr({\n        'aria-selected': 'true',\n        'tabindex': '0'\n      }).end();\n    }\n\n    for (var i = _.currentSlide, max = i + _.options.slidesToShow; i < max; i++) {\n      if (_.options.focusOnChange) {\n        _.$slides.eq(i).attr({\n          'tabindex': '0'\n        });\n      } else {\n        _.$slides.eq(i).removeAttr('tabindex');\n      }\n    }\n\n    _.activateADA();\n  };\n\n  Slick.prototype.initArrowEvents = function () {\n    var _ = this;\n\n    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n      _.$prevArrow.off('click.slick').on('click.slick', {\n        message: 'previous'\n      }, _.changeSlide);\n\n      _.$nextArrow.off('click.slick').on('click.slick', {\n        message: 'next'\n      }, _.changeSlide);\n\n      if (_.options.accessibility === true) {\n        _.$prevArrow.on('keydown.slick', _.keyHandler);\n\n        _.$nextArrow.on('keydown.slick', _.keyHandler);\n      }\n    }\n  };\n\n  Slick.prototype.initDotEvents = function () {\n    var _ = this;\n\n    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n      $('li', _.$dots).on('click.slick', {\n        message: 'index'\n      }, _.changeSlide);\n\n      if (_.options.accessibility === true) {\n        _.$dots.on('keydown.slick', _.keyHandler);\n      }\n    }\n\n    if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.slideCount > _.options.slidesToShow) {\n      $('li', _.$dots).on('mouseenter.slick', $.proxy(_.interrupt, _, true)).on('mouseleave.slick', $.proxy(_.interrupt, _, false));\n    }\n  };\n\n  Slick.prototype.initSlideEvents = function () {\n    var _ = this;\n\n    if (_.options.pauseOnHover) {\n      _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));\n\n      _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));\n    }\n  };\n\n  Slick.prototype.initializeEvents = function () {\n    var _ = this;\n\n    _.initArrowEvents();\n\n    _.initDotEvents();\n\n    _.initSlideEvents();\n\n    _.$list.on('touchstart.slick mousedown.slick', {\n      action: 'start'\n    }, _.swipeHandler);\n\n    _.$list.on('touchmove.slick mousemove.slick', {\n      action: 'move'\n    }, _.swipeHandler);\n\n    _.$list.on('touchend.slick mouseup.slick', {\n      action: 'end'\n    }, _.swipeHandler);\n\n    _.$list.on('touchcancel.slick mouseleave.slick', {\n      action: 'end'\n    }, _.swipeHandler);\n\n    _.$list.on('click.slick', _.clickHandler);\n\n    $(document).on(_.visibilityChange, $.proxy(_.visibility, _));\n\n    if (_.options.accessibility === true) {\n      _.$list.on('keydown.slick', _.keyHandler);\n    }\n\n    if (_.options.focusOnSelect === true) {\n      $(_.$slideTrack).children().on('click.slick', _.selectHandler);\n    }\n\n    $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));\n    $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));\n    $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);\n    $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);\n    $(_.setPosition);\n  };\n\n  Slick.prototype.initUI = function () {\n    var _ = this;\n\n    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n      _.$prevArrow.show();\n\n      _.$nextArrow.show();\n    }\n\n    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n      _.$dots.show();\n    }\n  };\n\n  Slick.prototype.keyHandler = function (event) {\n    var _ = this; //Dont slide if the cursor is inside the form fields and arrow keys are pressed\n\n\n    if (!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {\n      if (event.keyCode === 37 && _.options.accessibility === true) {\n        _.changeSlide({\n          data: {\n            message: _.options.rtl === true ? 'next' : 'previous'\n          }\n        });\n      } else if (event.keyCode === 39 && _.options.accessibility === true) {\n        _.changeSlide({\n          data: {\n            message: _.options.rtl === true ? 'previous' : 'next'\n          }\n        });\n      }\n    }\n  };\n\n  Slick.prototype.lazyLoad = function () {\n    var _ = this,\n        loadRange,\n        cloneRange,\n        rangeStart,\n        rangeEnd;\n\n    function loadImages(imagesScope) {\n      $('img[data-lazy]', imagesScope).each(function () {\n        var image = $(this),\n            imageSource = $(this).attr('data-lazy'),\n            imageSrcSet = $(this).attr('data-srcset'),\n            imageSizes = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),\n            imageToLoad = document.createElement('img');\n\n        imageToLoad.onload = function () {\n          image.animate({\n            opacity: 0\n          }, 100, function () {\n            if (imageSrcSet) {\n              image.attr('srcset', imageSrcSet);\n\n              if (imageSizes) {\n                image.attr('sizes', imageSizes);\n              }\n            }\n\n            image.attr('src', imageSource).animate({\n              opacity: 1\n            }, 200, function () {\n              image.removeAttr('data-lazy data-srcset data-sizes').removeClass('slick-loading');\n            });\n\n            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);\n          });\n        };\n\n        imageToLoad.onerror = function () {\n          image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');\n\n          _.$slider.trigger('lazyLoadError', [_, image, imageSource]);\n        };\n\n        imageToLoad.src = imageSource;\n      });\n    }\n\n    if (_.options.centerMode === true) {\n      if (_.options.infinite === true) {\n        rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);\n        rangeEnd = rangeStart + _.options.slidesToShow + 2;\n      } else {\n        rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));\n        rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;\n      }\n    } else {\n      rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;\n      rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);\n\n      if (_.options.fade === true) {\n        if (rangeStart > 0) rangeStart--;\n        if (rangeEnd <= _.slideCount) rangeEnd++;\n      }\n    }\n\n    loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);\n\n    if (_.options.lazyLoad === 'anticipated') {\n      var prevSlide = rangeStart - 1,\n          nextSlide = rangeEnd,\n          $slides = _.$slider.find('.slick-slide');\n\n      for (var i = 0; i < _.options.slidesToScroll; i++) {\n        if (prevSlide < 0) prevSlide = _.slideCount - 1;\n        loadRange = loadRange.add($slides.eq(prevSlide));\n        loadRange = loadRange.add($slides.eq(nextSlide));\n        prevSlide--;\n        nextSlide++;\n      }\n    }\n\n    loadImages(loadRange);\n\n    if (_.slideCount <= _.options.slidesToShow) {\n      cloneRange = _.$slider.find('.slick-slide');\n      loadImages(cloneRange);\n    } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {\n      cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);\n      loadImages(cloneRange);\n    } else if (_.currentSlide === 0) {\n      cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);\n      loadImages(cloneRange);\n    }\n  };\n\n  Slick.prototype.loadSlider = function () {\n    var _ = this;\n\n    _.setPosition();\n\n    _.$slideTrack.css({\n      opacity: 1\n    });\n\n    _.$slider.removeClass('slick-loading');\n\n    _.initUI();\n\n    if (_.options.lazyLoad === 'progressive') {\n      _.progressiveLazyLoad();\n    }\n  };\n\n  Slick.prototype.next = Slick.prototype.slickNext = function () {\n    var _ = this;\n\n    _.changeSlide({\n      data: {\n        message: 'next'\n      }\n    });\n  };\n\n  Slick.prototype.orientationChange = function () {\n    var _ = this;\n\n    _.checkResponsive();\n\n    _.setPosition();\n  };\n\n  Slick.prototype.pause = Slick.prototype.slickPause = function () {\n    var _ = this;\n\n    _.autoPlayClear();\n\n    _.paused = true;\n  };\n\n  Slick.prototype.play = Slick.prototype.slickPlay = function () {\n    var _ = this;\n\n    _.autoPlay();\n\n    _.options.autoplay = true;\n    _.paused = false;\n    _.focussed = false;\n    _.interrupted = false;\n  };\n\n  Slick.prototype.postSlide = function (index) {\n    var _ = this;\n\n    if (!_.unslicked) {\n      _.$slider.trigger('afterChange', [_, index]);\n\n      _.animating = false;\n\n      if (_.slideCount > _.options.slidesToShow) {\n        _.setPosition();\n      }\n\n      _.swipeLeft = null;\n\n      if (_.options.autoplay) {\n        _.autoPlay();\n      }\n\n      if (_.options.accessibility === true) {\n        _.initADA();\n\n        if (_.options.focusOnChange) {\n          var $currentSlide = $(_.$slides.get(_.currentSlide));\n          $currentSlide.attr('tabindex', 0).focus();\n        }\n      }\n    }\n  };\n\n  Slick.prototype.prev = Slick.prototype.slickPrev = function () {\n    var _ = this;\n\n    _.changeSlide({\n      data: {\n        message: 'previous'\n      }\n    });\n  };\n\n  Slick.prototype.preventDefault = function (event) {\n    event.preventDefault();\n  };\n\n  Slick.prototype.progressiveLazyLoad = function (tryCount) {\n    tryCount = tryCount || 1;\n\n    var _ = this,\n        $imgsToLoad = $('img[data-lazy]', _.$slider),\n        image,\n        imageSource,\n        imageSrcSet,\n        imageSizes,\n        imageToLoad;\n\n    if ($imgsToLoad.length) {\n      image = $imgsToLoad.first();\n      imageSource = image.attr('data-lazy');\n      imageSrcSet = image.attr('data-srcset');\n      imageSizes = image.attr('data-sizes') || _.$slider.attr('data-sizes');\n      imageToLoad = document.createElement('img');\n\n      imageToLoad.onload = function () {\n        if (imageSrcSet) {\n          image.attr('srcset', imageSrcSet);\n\n          if (imageSizes) {\n            image.attr('sizes', imageSizes);\n          }\n        }\n\n        image.attr('src', imageSource).removeAttr('data-lazy data-srcset data-sizes').removeClass('slick-loading');\n\n        if (_.options.adaptiveHeight === true) {\n          _.setPosition();\n        }\n\n        _.$slider.trigger('lazyLoaded', [_, image, imageSource]);\n\n        _.progressiveLazyLoad();\n      };\n\n      imageToLoad.onerror = function () {\n        if (tryCount < 3) {\n          /**\r\n           * try to load the image 3 times,\r\n           * leave a slight delay so we don't get\r\n           * servers blocking the request.\r\n           */\n          setTimeout(function () {\n            _.progressiveLazyLoad(tryCount + 1);\n          }, 500);\n        } else {\n          image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');\n\n          _.$slider.trigger('lazyLoadError', [_, image, imageSource]);\n\n          _.progressiveLazyLoad();\n        }\n      };\n\n      imageToLoad.src = imageSource;\n    } else {\n      _.$slider.trigger('allImagesLoaded', [_]);\n    }\n  };\n\n  Slick.prototype.refresh = function (initializing) {\n    var _ = this,\n        currentSlide,\n        lastVisibleIndex;\n\n    lastVisibleIndex = _.slideCount - _.options.slidesToShow; // in non-infinite sliders, we don't want to go past the\n    // last visible index.\n\n    if (!_.options.infinite && _.currentSlide > lastVisibleIndex) {\n      _.currentSlide = lastVisibleIndex;\n    } // if less slides than to show, go to start.\n\n\n    if (_.slideCount <= _.options.slidesToShow) {\n      _.currentSlide = 0;\n    }\n\n    currentSlide = _.currentSlide;\n\n    _.destroy(true);\n\n    $.extend(_, _.initials, {\n      currentSlide: currentSlide\n    });\n\n    _.init();\n\n    if (!initializing) {\n      _.changeSlide({\n        data: {\n          message: 'index',\n          index: currentSlide\n        }\n      }, false);\n    }\n  };\n\n  Slick.prototype.registerBreakpoints = function () {\n    var _ = this,\n        breakpoint,\n        currentBreakpoint,\n        l,\n        responsiveSettings = _.options.responsive || null;\n\n    if ($.type(responsiveSettings) === 'array' && responsiveSettings.length) {\n      _.respondTo = _.options.respondTo || 'window';\n\n      for (breakpoint in responsiveSettings) {\n        l = _.breakpoints.length - 1;\n\n        if (responsiveSettings.hasOwnProperty(breakpoint)) {\n          currentBreakpoint = responsiveSettings[breakpoint].breakpoint; // loop through the breakpoints and cut out any existing\n          // ones with the same breakpoint number, we don't want dupes.\n\n          while (l >= 0) {\n            if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {\n              _.breakpoints.splice(l, 1);\n            }\n\n            l--;\n          }\n\n          _.breakpoints.push(currentBreakpoint);\n\n          _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;\n        }\n      }\n\n      _.breakpoints.sort(function (a, b) {\n        return _.options.mobileFirst ? a - b : b - a;\n      });\n    }\n  };\n\n  Slick.prototype.reinit = function () {\n    var _ = this;\n\n    _.$slides = _.$slideTrack.children(_.options.slide).addClass('slick-slide');\n    _.slideCount = _.$slides.length;\n\n    if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {\n      _.currentSlide = _.currentSlide - _.options.slidesToScroll;\n    }\n\n    if (_.slideCount <= _.options.slidesToShow) {\n      _.currentSlide = 0;\n    }\n\n    _.registerBreakpoints();\n\n    _.setProps();\n\n    _.setupInfinite();\n\n    _.buildArrows();\n\n    _.updateArrows();\n\n    _.initArrowEvents();\n\n    _.buildDots();\n\n    _.updateDots();\n\n    _.initDotEvents();\n\n    _.cleanUpSlideEvents();\n\n    _.initSlideEvents();\n\n    _.checkResponsive(false, true);\n\n    if (_.options.focusOnSelect === true) {\n      $(_.$slideTrack).children().on('click.slick', _.selectHandler);\n    }\n\n    _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\n\n    _.setPosition();\n\n    _.focusHandler();\n\n    _.paused = !_.options.autoplay;\n\n    _.autoPlay();\n\n    _.$slider.trigger('reInit', [_]);\n  };\n\n  Slick.prototype.resize = function () {\n    var _ = this;\n\n    if ($(window).width() !== _.windowWidth) {\n      clearTimeout(_.windowDelay);\n      _.windowDelay = window.setTimeout(function () {\n        _.windowWidth = $(window).width();\n\n        _.checkResponsive();\n\n        if (!_.unslicked) {\n          _.setPosition();\n        }\n      }, 50);\n    }\n  };\n\n  Slick.prototype.removeSlide = Slick.prototype.slickRemove = function (index, removeBefore, removeAll) {\n    var _ = this;\n\n    if (typeof index === 'boolean') {\n      removeBefore = index;\n      index = removeBefore === true ? 0 : _.slideCount - 1;\n    } else {\n      index = removeBefore === true ? --index : index;\n    }\n\n    if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {\n      return false;\n    }\n\n    _.unload();\n\n    if (removeAll === true) {\n      _.$slideTrack.children().remove();\n    } else {\n      _.$slideTrack.children(this.options.slide).eq(index).remove();\n    }\n\n    _.$slides = _.$slideTrack.children(this.options.slide);\n\n    _.$slideTrack.children(this.options.slide).detach();\n\n    _.$slideTrack.append(_.$slides);\n\n    _.$slidesCache = _.$slides;\n\n    _.reinit();\n  };\n\n  Slick.prototype.setCSS = function (position) {\n    var _ = this,\n        positionProps = {},\n        x,\n        y;\n\n    if (_.options.rtl === true) {\n      position = -position;\n    }\n\n    x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';\n    y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';\n    positionProps[_.positionProp] = position;\n\n    if (_.transformsEnabled === false) {\n      _.$slideTrack.css(positionProps);\n    } else {\n      positionProps = {};\n\n      if (_.cssTransitions === false) {\n        positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';\n\n        _.$slideTrack.css(positionProps);\n      } else {\n        positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';\n\n        _.$slideTrack.css(positionProps);\n      }\n    }\n  };\n\n  Slick.prototype.setDimensions = function () {\n    var _ = this;\n\n    if (_.options.vertical === false) {\n      if (_.options.centerMode === true) {\n        _.$list.css({\n          padding: '0px ' + _.options.centerPadding\n        });\n      }\n    } else {\n      _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);\n\n      if (_.options.centerMode === true) {\n        _.$list.css({\n          padding: _.options.centerPadding + ' 0px'\n        });\n      }\n    }\n\n    _.listWidth = _.$list.width();\n    _.listHeight = _.$list.height();\n\n    if (_.options.vertical === false && _.options.variableWidth === false) {\n      _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);\n\n      _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children('.slick-slide').length));\n    } else if (_.options.variableWidth === true) {\n      _.$slideTrack.width(5000 * _.slideCount);\n    } else {\n      _.slideWidth = Math.ceil(_.listWidth);\n\n      _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length));\n    }\n\n    var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();\n\n    if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);\n  };\n\n  Slick.prototype.setFade = function () {\n    var _ = this,\n        targetLeft;\n\n    _.$slides.each(function (index, element) {\n      targetLeft = _.slideWidth * index * -1;\n\n      if (_.options.rtl === true) {\n        $(element).css({\n          position: 'relative',\n          right: targetLeft,\n          top: 0,\n          zIndex: _.options.zIndex - 2,\n          opacity: 0\n        });\n      } else {\n        $(element).css({\n          position: 'relative',\n          left: targetLeft,\n          top: 0,\n          zIndex: _.options.zIndex - 2,\n          opacity: 0\n        });\n      }\n    });\n\n    _.$slides.eq(_.currentSlide).css({\n      zIndex: _.options.zIndex - 1,\n      opacity: 1\n    });\n  };\n\n  Slick.prototype.setHeight = function () {\n    var _ = this;\n\n    if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\n      var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\n\n      _.$list.css('height', targetHeight);\n    }\n  };\n\n  Slick.prototype.setOption = Slick.prototype.slickSetOption = function () {\n    /**\r\n     * accepts arguments in format of:\r\n     *\r\n     *  - for changing a single option's value:\r\n     *     .slick(\"setOption\", option, value, refresh )\r\n     *\r\n     *  - for changing a set of responsive options:\r\n     *     .slick(\"setOption\", 'responsive', [{}, ...], refresh )\r\n     *\r\n     *  - for updating multiple values at once (not responsive)\r\n     *     .slick(\"setOption\", { 'option': value, ... }, refresh )\r\n     */\n    var _ = this,\n        l,\n        item,\n        option,\n        value,\n        refresh = false,\n        type;\n\n    if ($.type(arguments[0]) === 'object') {\n      option = arguments[0];\n      refresh = arguments[1];\n      type = 'multiple';\n    } else if ($.type(arguments[0]) === 'string') {\n      option = arguments[0];\n      value = arguments[1];\n      refresh = arguments[2];\n\n      if (arguments[0] === 'responsive' && $.type(arguments[1]) === 'array') {\n        type = 'responsive';\n      } else if (typeof arguments[1] !== 'undefined') {\n        type = 'single';\n      }\n    }\n\n    if (type === 'single') {\n      _.options[option] = value;\n    } else if (type === 'multiple') {\n      $.each(option, function (opt, val) {\n        _.options[opt] = val;\n      });\n    } else if (type === 'responsive') {\n      for (item in value) {\n        if ($.type(_.options.responsive) !== 'array') {\n          _.options.responsive = [value[item]];\n        } else {\n          l = _.options.responsive.length - 1; // loop through the responsive object and splice out duplicates.\n\n          while (l >= 0) {\n            if (_.options.responsive[l].breakpoint === value[item].breakpoint) {\n              _.options.responsive.splice(l, 1);\n            }\n\n            l--;\n          }\n\n          _.options.responsive.push(value[item]);\n        }\n      }\n    }\n\n    if (refresh) {\n      _.unload();\n\n      _.reinit();\n    }\n  };\n\n  Slick.prototype.setPosition = function () {\n    var _ = this;\n\n    _.setDimensions();\n\n    _.setHeight();\n\n    if (_.options.fade === false) {\n      _.setCSS(_.getLeft(_.currentSlide));\n    } else {\n      _.setFade();\n    }\n\n    _.$slider.trigger('setPosition', [_]);\n  };\n\n  Slick.prototype.setProps = function () {\n    var _ = this,\n        bodyStyle = document.body.style;\n\n    _.positionProp = _.options.vertical === true ? 'top' : 'left';\n\n    if (_.positionProp === 'top') {\n      _.$slider.addClass('slick-vertical');\n    } else {\n      _.$slider.removeClass('slick-vertical');\n    }\n\n    if (bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.msTransition !== undefined) {\n      if (_.options.useCSS === true) {\n        _.cssTransitions = true;\n      }\n    }\n\n    if (_.options.fade) {\n      if (typeof _.options.zIndex === 'number') {\n        if (_.options.zIndex < 3) {\n          _.options.zIndex = 3;\n        }\n      } else {\n        _.options.zIndex = _.defaults.zIndex;\n      }\n    }\n\n    if (bodyStyle.OTransform !== undefined) {\n      _.animType = 'OTransform';\n      _.transformType = '-o-transform';\n      _.transitionType = 'OTransition';\n      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\n    }\n\n    if (bodyStyle.MozTransform !== undefined) {\n      _.animType = 'MozTransform';\n      _.transformType = '-moz-transform';\n      _.transitionType = 'MozTransition';\n      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;\n    }\n\n    if (bodyStyle.webkitTransform !== undefined) {\n      _.animType = 'webkitTransform';\n      _.transformType = '-webkit-transform';\n      _.transitionType = 'webkitTransition';\n      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\n    }\n\n    if (bodyStyle.msTransform !== undefined) {\n      _.animType = 'msTransform';\n      _.transformType = '-ms-transform';\n      _.transitionType = 'msTransition';\n      if (bodyStyle.msTransform === undefined) _.animType = false;\n    }\n\n    if (bodyStyle.transform !== undefined && _.animType !== false) {\n      _.animType = 'transform';\n      _.transformType = 'transform';\n      _.transitionType = 'transition';\n    }\n\n    _.transformsEnabled = _.options.useTransform && _.animType !== null && _.animType !== false;\n  };\n\n  Slick.prototype.setSlideClasses = function (index) {\n    var _ = this,\n        centerOffset,\n        allSlides,\n        indexOffset,\n        remainder;\n\n    allSlides = _.$slider.find('.slick-slide').removeClass('slick-active slick-center slick-current').attr('aria-hidden', 'true');\n\n    _.$slides.eq(index).addClass('slick-current');\n\n    if (_.options.centerMode === true) {\n      var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;\n      centerOffset = Math.floor(_.options.slidesToShow / 2);\n\n      if (_.options.infinite === true) {\n        if (index >= centerOffset && index <= _.slideCount - 1 - centerOffset) {\n          _.$slides.slice(index - centerOffset + evenCoef, index + centerOffset + 1).addClass('slick-active').attr('aria-hidden', 'false');\n        } else {\n          indexOffset = _.options.slidesToShow + index;\n          allSlides.slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2).addClass('slick-active').attr('aria-hidden', 'false');\n        }\n\n        if (index === 0) {\n          allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass('slick-center');\n        } else if (index === _.slideCount - 1) {\n          allSlides.eq(_.options.slidesToShow).addClass('slick-center');\n        }\n      }\n\n      _.$slides.eq(index).addClass('slick-center');\n    } else {\n      if (index >= 0 && index <= _.slideCount - _.options.slidesToShow) {\n        _.$slides.slice(index, index + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');\n      } else if (allSlides.length <= _.options.slidesToShow) {\n        allSlides.addClass('slick-active').attr('aria-hidden', 'false');\n      } else {\n        remainder = _.slideCount % _.options.slidesToShow;\n        indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;\n\n        if (_.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow) {\n          allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass('slick-active').attr('aria-hidden', 'false');\n        } else {\n          allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');\n        }\n      }\n    }\n\n    if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {\n      _.lazyLoad();\n    }\n  };\n\n  Slick.prototype.setupInfinite = function () {\n    var _ = this,\n        i,\n        slideIndex,\n        infiniteCount;\n\n    if (_.options.fade === true) {\n      _.options.centerMode = false;\n    }\n\n    if (_.options.infinite === true && _.options.fade === false) {\n      slideIndex = null;\n\n      if (_.slideCount > _.options.slidesToShow) {\n        if (_.options.centerMode === true) {\n          infiniteCount = _.options.slidesToShow + 1;\n        } else {\n          infiniteCount = _.options.slidesToShow;\n        }\n\n        for (i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) {\n          slideIndex = i - 1;\n          $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass('slick-cloned');\n        }\n\n        for (i = 0; i < infiniteCount + _.slideCount; i += 1) {\n          slideIndex = i;\n          $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass('slick-cloned');\n        }\n\n        _.$slideTrack.find('.slick-cloned').find('[id]').each(function () {\n          $(this).attr('id', '');\n        });\n      }\n    }\n  };\n\n  Slick.prototype.interrupt = function (toggle) {\n    var _ = this;\n\n    if (!toggle) {\n      _.autoPlay();\n    }\n\n    _.interrupted = toggle;\n  };\n\n  Slick.prototype.selectHandler = function (event) {\n    var _ = this;\n\n    var targetElement = $(event.target).is('.slick-slide') ? $(event.target) : $(event.target).parents('.slick-slide');\n    var index = parseInt(targetElement.attr('data-slick-index'));\n    if (!index) index = 0;\n\n    if (_.slideCount <= _.options.slidesToShow) {\n      _.slideHandler(index, false, true);\n\n      return;\n    }\n\n    _.slideHandler(index);\n  };\n\n  Slick.prototype.slideHandler = function (index, sync, dontAnimate) {\n    var targetSlide,\n        animSlide,\n        oldSlide,\n        slideLeft,\n        targetLeft = null,\n        _ = this,\n        navTarget;\n\n    sync = sync || false;\n\n    if (_.animating === true && _.options.waitForAnimate === true) {\n      return;\n    }\n\n    if (_.options.fade === true && _.currentSlide === index) {\n      return;\n    }\n\n    if (sync === false) {\n      _.asNavFor(index);\n    }\n\n    targetSlide = index;\n    targetLeft = _.getLeft(targetSlide);\n    slideLeft = _.getLeft(_.currentSlide);\n    _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;\n\n    if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {\n      if (_.options.fade === false) {\n        targetSlide = _.currentSlide;\n\n        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\n          _.animateSlide(slideLeft, function () {\n            _.postSlide(targetSlide);\n          });\n        } else {\n          _.postSlide(targetSlide);\n        }\n      }\n\n      return;\n    } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > _.slideCount - _.options.slidesToScroll)) {\n      if (_.options.fade === false) {\n        targetSlide = _.currentSlide;\n\n        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\n          _.animateSlide(slideLeft, function () {\n            _.postSlide(targetSlide);\n          });\n        } else {\n          _.postSlide(targetSlide);\n        }\n      }\n\n      return;\n    }\n\n    if (_.options.autoplay) {\n      clearInterval(_.autoPlayTimer);\n    }\n\n    if (targetSlide < 0) {\n      if (_.slideCount % _.options.slidesToScroll !== 0) {\n        animSlide = _.slideCount - _.slideCount % _.options.slidesToScroll;\n      } else {\n        animSlide = _.slideCount + targetSlide;\n      }\n    } else if (targetSlide >= _.slideCount) {\n      if (_.slideCount % _.options.slidesToScroll !== 0) {\n        animSlide = 0;\n      } else {\n        animSlide = targetSlide - _.slideCount;\n      }\n    } else {\n      animSlide = targetSlide;\n    }\n\n    _.animating = true;\n\n    _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);\n\n    oldSlide = _.currentSlide;\n    _.currentSlide = animSlide;\n\n    _.setSlideClasses(_.currentSlide);\n\n    if (_.options.asNavFor) {\n      navTarget = _.getNavTarget();\n      navTarget = navTarget.slick('getSlick');\n\n      if (navTarget.slideCount <= navTarget.options.slidesToShow) {\n        navTarget.setSlideClasses(_.currentSlide);\n      }\n    }\n\n    _.updateDots();\n\n    _.updateArrows();\n\n    if (_.options.fade === true) {\n      if (dontAnimate !== true) {\n        _.fadeSlideOut(oldSlide);\n\n        _.fadeSlide(animSlide, function () {\n          _.postSlide(animSlide);\n        });\n      } else {\n        _.postSlide(animSlide);\n      }\n\n      _.animateHeight();\n\n      return;\n    }\n\n    if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\n      _.animateSlide(targetLeft, function () {\n        _.postSlide(animSlide);\n      });\n    } else {\n      _.postSlide(animSlide);\n    }\n  };\n\n  Slick.prototype.startLoad = function () {\n    var _ = this;\n\n    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n      _.$prevArrow.hide();\n\n      _.$nextArrow.hide();\n    }\n\n    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n      _.$dots.hide();\n    }\n\n    _.$slider.addClass('slick-loading');\n  };\n\n  Slick.prototype.swipeDirection = function () {\n    var xDist,\n        yDist,\n        r,\n        swipeAngle,\n        _ = this;\n\n    xDist = _.touchObject.startX - _.touchObject.curX;\n    yDist = _.touchObject.startY - _.touchObject.curY;\n    r = Math.atan2(yDist, xDist);\n    swipeAngle = Math.round(r * 180 / Math.PI);\n\n    if (swipeAngle < 0) {\n      swipeAngle = 360 - Math.abs(swipeAngle);\n    }\n\n    if (swipeAngle <= 45 && swipeAngle >= 0) {\n      return _.options.rtl === false ? 'left' : 'right';\n    }\n\n    if (swipeAngle <= 360 && swipeAngle >= 315) {\n      return _.options.rtl === false ? 'left' : 'right';\n    }\n\n    if (swipeAngle >= 135 && swipeAngle <= 225) {\n      return _.options.rtl === false ? 'right' : 'left';\n    }\n\n    if (_.options.verticalSwiping === true) {\n      if (swipeAngle >= 35 && swipeAngle <= 135) {\n        return 'down';\n      } else {\n        return 'up';\n      }\n    }\n\n    return 'vertical';\n  };\n\n  Slick.prototype.swipeEnd = function (event) {\n    var _ = this,\n        slideCount,\n        direction;\n\n    _.dragging = false;\n    _.swiping = false;\n\n    if (_.scrolling) {\n      _.scrolling = false;\n      return false;\n    }\n\n    _.interrupted = false;\n    _.shouldClick = _.touchObject.swipeLength > 10 ? false : true;\n\n    if (_.touchObject.curX === undefined) {\n      return false;\n    }\n\n    if (_.touchObject.edgeHit === true) {\n      _.$slider.trigger('edge', [_, _.swipeDirection()]);\n    }\n\n    if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {\n      direction = _.swipeDirection();\n\n      switch (direction) {\n        case 'left':\n        case 'down':\n          slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount();\n          _.currentDirection = 0;\n          break;\n\n        case 'right':\n        case 'up':\n          slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount();\n          _.currentDirection = 1;\n          break;\n\n        default:\n      }\n\n      if (direction != 'vertical') {\n        _.slideHandler(slideCount);\n\n        _.touchObject = {};\n\n        _.$slider.trigger('swipe', [_, direction]);\n      }\n    } else {\n      if (_.touchObject.startX !== _.touchObject.curX) {\n        _.slideHandler(_.currentSlide);\n\n        _.touchObject = {};\n      }\n    }\n  };\n\n  Slick.prototype.swipeHandler = function (event) {\n    var _ = this;\n\n    if (_.options.swipe === false || 'ontouchend' in document && _.options.swipe === false) {\n      return;\n    } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {\n      return;\n    }\n\n    _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ? event.originalEvent.touches.length : 1;\n    _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold;\n\n    if (_.options.verticalSwiping === true) {\n      _.touchObject.minSwipe = _.listHeight / _.options.touchThreshold;\n    }\n\n    switch (event.data.action) {\n      case 'start':\n        _.swipeStart(event);\n\n        break;\n\n      case 'move':\n        _.swipeMove(event);\n\n        break;\n\n      case 'end':\n        _.swipeEnd(event);\n\n        break;\n    }\n  };\n\n  Slick.prototype.swipeMove = function (event) {\n    var _ = this,\n        edgeWasHit = false,\n        curLeft,\n        swipeDirection,\n        swipeLength,\n        positionOffset,\n        touches,\n        verticalSwipeLength;\n\n    touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;\n\n    if (!_.dragging || _.scrolling || touches && touches.length !== 1) {\n      return false;\n    }\n\n    curLeft = _.getLeft(_.currentSlide);\n    _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;\n    _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;\n    _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));\n    verticalSwipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));\n\n    if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {\n      _.scrolling = true;\n      return false;\n    }\n\n    if (_.options.verticalSwiping === true) {\n      _.touchObject.swipeLength = verticalSwipeLength;\n    }\n\n    swipeDirection = _.swipeDirection();\n\n    if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {\n      _.swiping = true;\n      event.preventDefault();\n    }\n\n    positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);\n\n    if (_.options.verticalSwiping === true) {\n      positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;\n    }\n\n    swipeLength = _.touchObject.swipeLength;\n    _.touchObject.edgeHit = false;\n\n    if (_.options.infinite === false) {\n      if (_.currentSlide === 0 && swipeDirection === 'right' || _.currentSlide >= _.getDotCount() && swipeDirection === 'left') {\n        swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;\n        _.touchObject.edgeHit = true;\n      }\n    }\n\n    if (_.options.vertical === false) {\n      _.swipeLeft = curLeft + swipeLength * positionOffset;\n    } else {\n      _.swipeLeft = curLeft + swipeLength * (_.$list.height() / _.listWidth) * positionOffset;\n    }\n\n    if (_.options.verticalSwiping === true) {\n      _.swipeLeft = curLeft + swipeLength * positionOffset;\n    }\n\n    if (_.options.fade === true || _.options.touchMove === false) {\n      return false;\n    }\n\n    if (_.animating === true) {\n      _.swipeLeft = null;\n      return false;\n    }\n\n    _.setCSS(_.swipeLeft);\n  };\n\n  Slick.prototype.swipeStart = function (event) {\n    var _ = this,\n        touches;\n\n    _.interrupted = true;\n\n    if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {\n      _.touchObject = {};\n      return false;\n    }\n\n    if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {\n      touches = event.originalEvent.touches[0];\n    }\n\n    _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;\n    _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;\n    _.dragging = true;\n  };\n\n  Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function () {\n    var _ = this;\n\n    if (_.$slidesCache !== null) {\n      _.unload();\n\n      _.$slideTrack.children(this.options.slide).detach();\n\n      _.$slidesCache.appendTo(_.$slideTrack);\n\n      _.reinit();\n    }\n  };\n\n  Slick.prototype.unload = function () {\n    var _ = this;\n\n    $('.slick-cloned', _.$slider).remove();\n\n    if (_.$dots) {\n      _.$dots.remove();\n    }\n\n    if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {\n      _.$prevArrow.remove();\n    }\n\n    if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {\n      _.$nextArrow.remove();\n    }\n\n    _.$slides.removeClass('slick-slide slick-active slick-visible slick-current').attr('aria-hidden', 'true').css('width', '');\n  };\n\n  Slick.prototype.unslick = function (fromBreakpoint) {\n    var _ = this;\n\n    _.$slider.trigger('unslick', [_, fromBreakpoint]);\n\n    _.destroy();\n  };\n\n  Slick.prototype.updateArrows = function () {\n    var _ = this,\n        centerOffset;\n\n    centerOffset = Math.floor(_.options.slidesToShow / 2);\n\n    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow && !_.options.infinite) {\n      _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n      _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n      if (_.currentSlide === 0) {\n        _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n\n        _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n      } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {\n        _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n\n        _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n      } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {\n        _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n\n        _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n      }\n    }\n  };\n\n  Slick.prototype.updateDots = function () {\n    var _ = this;\n\n    if (_.$dots !== null) {\n      _.$dots.find('li').removeClass('slick-active').end();\n\n      _.$dots.find('li').eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass('slick-active');\n    }\n  };\n\n  Slick.prototype.visibility = function () {\n    var _ = this;\n\n    if (_.options.autoplay) {\n      if (document[_.hidden]) {\n        _.interrupted = true;\n      } else {\n        _.interrupted = false;\n      }\n    }\n  };\n\n  $.fn.slick = function () {\n    var _ = this,\n        opt = arguments[0],\n        args = Array.prototype.slice.call(arguments, 1),\n        l = _.length,\n        i,\n        ret;\n\n    for (i = 0; i < l; i++) {\n      if (_typeof(opt) == 'object' || typeof opt == 'undefined') _[i].slick = new Slick(_[i], opt);else ret = _[i].slick[opt].apply(_[i].slick, args);\n      if (typeof ret != 'undefined') return ret;\n    }\n\n    return _;\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///392\n")}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(B.exports,B,B.exports,__webpack_require__),B.loaded=!0,B.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.amdO={},deferred=[],__webpack_require__.O=(Q,F,B,U)=>{if(!F){var I=1/0;for(s=0;s<deferred.length;s++){for(var[F,B,U]=deferred[s],C=!0,g=0;g<F.length;g++)(!1&U||I>=U)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](F[g])))?F.splice(g--,1):(C=!1,U<I&&(I=U));C&&(deferred.splice(s--,1),Q=B())}return Q}U=U||0;for(var s=deferred.length;s>0&&deferred[s-1][2]>U;s--)deferred[s]=deferred[s-1];deferred[s]=[F,B,U]},__webpack_require__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(F,{a:F}),F},__webpack_require__.d=(Q,F)=>{for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),(()=>{var Q={143:0};__webpack_require__.O.j=F=>0===Q[F];var F=(F,B)=>{var U,I,[C,g,s]=B,A=0;for(U in g)__webpack_require__.o(g,U)&&(__webpack_require__.m[U]=g[U]);if(s)var x=s(__webpack_require__);for(F&&F(B);A<C.length;A++)I=C[A],__webpack_require__.o(Q,I)&&Q[I]&&Q[I][0](),Q[C[A]]=0;return __webpack_require__.O(x)},B=self.webpackChunk=self.webpackChunk||[];B.forEach(F.bind(null,0)),B.push=F.bind(null,B.push.bind(B))})();var __webpack_exports__=__webpack_require__.O(void 0,[831],(()=>__webpack_require__(934)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();